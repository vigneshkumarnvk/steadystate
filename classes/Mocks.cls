/* Generated by apex-mocks-generator version 4.0.1 */
@isTest
public class Mocks
{
    public class SalesOrders extends fflib_SObjectMocks.SObjectDomain implements ISalesOrders
    {
        private fflib_ApexMocks mocks;

        public SalesOrders(fflib_ApexMocks mocks)
        {
            super(mocks);
            this.mocks = mocks;
        }

        public void updateConvertCountAndQuoteStatus(fflib_ISObjectUnitOfWork uow)
        {
            mocks.mockVoidMethod(this, 'updateConvertCountAndQuoteStatus', new List<Type> {System.Type.forName('fflib_ISObjectUnitOfWork')}, new List<Object> {uow});
        }

        public void initStaticVariables()
        {
            mocks.mockVoidMethod(this, 'initStaticVariables', new List<Type> {}, new List<Object> {});
        }

        public void checkBeforeClone(Id targetCustId, String targetDocType)
        {
            mocks.mockVoidMethod(this, 'checkBeforeClone', new List<Type> {System.Type.forName('Id'), System.Type.forName('String')}, new List<Object> {targetCustId, targetDocType});
        }

        public void checkBeforeConvert()
        {
            mocks.mockVoidMethod(this, 'checkBeforeConvert', new List<Type> {}, new List<Object> {});
        }
    }

    public class Accounts extends fflib_SObjectMocks.SObjectDomain implements IAccounts
    {
        private fflib_ApexMocks mocks;

        public Accounts(fflib_ApexMocks mocks)
        {
            super(mocks);
            this.mocks = mocks;
        }
    }

    public class TMs extends fflib_SObjectMocks.SObjectDomain implements ITMs
    {
        private fflib_ApexMocks mocks;

        public TMs(fflib_ApexMocks mocks)
        {
            super(mocks);
            this.mocks = mocks;
        }

        public void updateCustomerPONumber(Map<Id, String> poToUpdateBySOIds, fflib_ISObjectUnitOfWork uow)
        {
            mocks.mockVoidMethod(this, 'updateCustomerPONumber', new List<Type> {System.Type.forName('Map<Id, String>'), System.Type.forName('fflib_ISObjectUnitOfWork')}, new List<Object> {poToUpdateBySOIds, uow});
        }
    }

    public class TMLines extends fflib_SObjectMocks.SObjectDomain implements ITMLines
    {
        private fflib_ApexMocks mocks;

        public TMLines(fflib_ApexMocks mocks)
        {
            super(mocks);
            this.mocks = mocks;
        }

        public void updateTMLinesWhenResourceTypeChanged()
        {
            mocks.mockVoidMethod(this, 'updateTMLinesWhenResourceTypeChanged', new List<Type> {}, new List<Object> {});
        }

        public void updateTMLinesWhenUnitOfMeasureChanged()
        {
            mocks.mockVoidMethod(this, 'updateTMLinesWhenUnitOfMeasureChanged', new List<Type> {}, new List<Object> {});
        }

        public void updateTMLinesRestOfFields()
        {
            mocks.mockVoidMethod(this, 'updateTMLinesRestOfFields', new List<Type> {}, new List<Object> {});
        }
    }

    public class UsersSelector extends fflib_SObjectMocks.SObjectSelector implements IUsersSelector
    {
        private fflib_ApexMocks mocks;

        public UsersSelector(fflib_ApexMocks mocks)
        {
            super(mocks);
            this.mocks = mocks;
        }

        public List<User> selectById(Set<Id> idSet)
        {
            return (List<User>) mocks.mockNonVoidMethod(this, 'selectById', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }
    }

    public class ContractLinesSelector extends fflib_SObjectMocks.SObjectSelector implements IContractLinesSelector
    {
        private fflib_ApexMocks mocks;

        public ContractLinesSelector(fflib_ApexMocks mocks)
        {
            super(mocks);
            this.mocks = mocks;
        }

        public Map<Id, Contract_Line__c> selectTMDescriptionById(Set<Id> idSet)
        {
            return (Map<Id, Contract_Line__c>) mocks.mockNonVoidMethod(this, 'selectTMDescriptionById', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<Contract_Line__c> selectById(Set<Id> idSet)
        {
            return (List<Contract_Line__c>) mocks.mockNonVoidMethod(this, 'selectById', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<Contract_Line__c> selectLinesByContractId(Set<Id> idSet)
        {
            return (List<Contract_Line__c>) mocks.mockNonVoidMethod(this, 'selectLinesByContractId', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<Contract_Line__c> selectLinesByContractIdByWorkDate(Set<Id> idSet, Date workDate)
        {
            return (List<Contract_Line__c>) mocks.mockNonVoidMethod(this, 'selectLinesByContractIdByWorkDate', new List<Type> {System.Type.forName('Set<Id>'), System.Type.forName('Date')}, new List<Object> {idSet, workDate});
        }

        public Map<String, Contract_Line__c> selectLinesWithContractIdResTypeAndUOMByContractId(Set<Id> contractIdSet)
        {
            return (Map<String, Contract_Line__c>) mocks.mockNonVoidMethod(this, 'selectLinesWithContractIdResTypeAndUOMByContractId', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {contractIdSet});
        }

        public Map<String, Contract_Line__c> selectLinesWithContractIdResAndUOMByContractId(Set<Id> contractIdSet)
        {
            return (Map<String, Contract_Line__c>) mocks.mockNonVoidMethod(this, 'selectLinesWithContractIdResAndUOMByContractId', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {contractIdSet});
        }

        public Map<String, Contract_Line__c> mapLineByContractResORResourceTypeAndUOM(Set<Id> contractIds)
        {
            return (Map<String, Contract_Line__c>) mocks.mockNonVoidMethod(this, 'mapLineByContractResORResourceTypeAndUOM', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {contractIds});
        }
    }

    public class TMsService implements ITMsService
    {
        private fflib_ApexMocks mocks;

        public TMsService(fflib_ApexMocks mocks)
        {
            this.mocks = mocks;
        }

        public String createSalesInvoice(Id salesOrderId, Set<Id> TMIds, Set<Id> TMLIds, String invoiceNote)
        {
            return (String) mocks.mockNonVoidMethod(this, 'createSalesInvoice', new List<Type> {System.Type.forName('Id'), System.Type.forName('Set<Id>'), System.Type.forName('Set<Id>'), System.Type.forName('String')}, new List<Object> {salesOrderId, TMIds, TMLIds, invoiceNote});
        }

        public void addLinesToSalesInvoiceAsync(Id salesInvoice, Set<Id> TMLIds)
        {
            mocks.mockVoidMethod(this, 'addLinesToSalesInvoiceAsync', new List<Type> {System.Type.forName('Id'), System.Type.forName('Set<Id>')}, new List<Object> {salesInvoice, TMLIds});
        }

        public void addSurchargeLineToSalesInvoiceAsync(Id salesInvoice)
        {
            mocks.mockVoidMethod(this, 'addSurchargeLineToSalesInvoiceAsync', new List<Type> {System.Type.forName('Id')}, new List<Object> {salesInvoice});
        }

        public ACVTMWrapper createTMFromSalesOrder(Id salesOrderId, List<ACVSalesOrderJobTaskWrapper> jobTaskWrappers)
        {
            return (ACVTMWrapper) mocks.mockNonVoidMethod(this, 'createTMFromSalesOrder', new List<Type> {System.Type.forName('Id'), System.Type.forName('List<ACVSalesOrderJobTaskWrapper>')}, new List<Object> {salesOrderId, jobTaskWrappers});
        }

        //ticket 19130 <<
        /*
        public List<ACVTMJobTaskWrapper> createTMJobTasksFromSalesOrder(Sales_Order__c salesOrder, List<ACVSalesOrderJobTaskWrapper> salesOrderJobTaskWrappers, TM__c tm, Integer nextJobTaskLineNo, Integer nextTMLineNo)
        {
            return (List<ACVTMJobTaskWrapper>) mocks.mockNonVoidMethod(this, 'createTMJobTasksFromSalesOrder', new List<Type> {System.Type.forName('Sales_Order__c'), System.Type.forName('List<ACVSalesOrderJobTaskWrapper>'), System.Type.forName('TM__c'), System.Type.forName('Integer'), System.Type.forName('Integer')}, new List<Object> {salesOrder, salesOrderJobTaskWrappers, tm, nextJobTaskLineNo, nextTMLineNo});
        }
        */
        public List<ACVTMJobTaskWrapper> createTMJobTasksFromSalesOrder(Sales_Order__c salesOrder, List<ACVSalesOrderJobTaskWrapper> salesOrderJobTaskWrappers, TM__c tm, List<ACVTMJobTaskWrapper> tmJobTaskWrappers, Integer nextJobTaskLineNo, Integer nextTMLineNo)
        {
            return (List<ACVTMJobTaskWrapper>) mocks.mockNonVoidMethod(this, 'createTMJobTasksFromSalesOrder', new List<Type> {System.Type.forName('Sales_Order__c'), System.Type.forName('List<ACVSalesOrderJobTaskWrapper>'), System.Type.forName('TM__c'), System.Type.forName('List<ACVTMJobTaskWrapper>'), System.Type.forName('Integer'), System.Type.forName('Integer')}, new List<Object> {salesOrder, salesOrderJobTaskWrappers, tm, nextJobTaskLineNo, nextTMLineNo});
        }
        public void calculateChildResources(TM__c tm, List<ACVTMJobTaskWrapper> jobTaskWrappers) {
            mocks.mockVoidMethod(this, 'calculateChildResources', new List<Type> { System.Type.forName('TM__c'), System.Type.forName('List<ACVTMJobTaskWrapper>') }, new List<Object> { tm, jobTaskWrappers});
        }
        //ticket 19130 >>

        public void createTMLinesFromSalesOrder(Sales_Order__c salesOrder, ACVSalesOrderJobTaskWrapper salesOrderJobTaskWrapper, TM__c tm, ACVTMJobTaskWrapper tmJobTaskWrapper, Integer lastTMLineNo)
        {
            mocks.mockVoidMethod(this, 'createTMLinesFromSalesOrder', new List<Type> {System.Type.forName('Sales_Order__c'), System.Type.forName('ACVSalesOrderJobTaskWrapper'), System.Type.forName('TM__c'), System.Type.forName('ACVTMJobTaskWrapper'), System.Type.forName('Integer')}, new List<Object> {salesOrder, salesOrderJobTaskWrapper, tm, tmJobTaskWrapper, lastTMLineNo});
        }
    }

    public class SalesInvoicesService implements ISalesInvoicesService
    {
        private fflib_ApexMocks mocks;

        public SalesInvoicesService(fflib_ApexMocks mocks)
        {
            this.mocks = mocks;
        }

        public Sales_Invoice__c createCreditMemo(Sales_Invoice__c recordToReverse, Id creditMemoWorksheetId)
        {
            return (Sales_Invoice__c) mocks.mockNonVoidMethod(this, 'createCreditMemo', new List<Type> {System.Type.forName('Sales_Invoice__c'), System.Type.forName('Id')}, new List<Object> {recordToReverse, creditMemoWorksheetId});
        }

        public void submitForApproval(Id recordId)
        {
            mocks.mockVoidMethod(this, 'submitForApproval', new List<Type> {System.Type.forName('Id')}, new List<Object> {recordId});
        }

        public void submitForApproval(Id recordId, Boolean isInitialApprovalRequest)
        {
            mocks.mockVoidMethod(this, 'submitForApproval', new List<Type> {System.Type.forName('Id'), System.Type.forName('Boolean')}, new List<Object> {recordId, isInitialApprovalRequest});
        }

        public void submitForApproval(Id recordId, Boolean isInitialApprovalRequest, String comment)
        {
            mocks.mockVoidMethod(this, 'submitForApproval', new List<Type> {System.Type.forName('Id'), System.Type.forName('Boolean'), System.Type.forName('String')}, new List<Object> {recordId, isInitialApprovalRequest, comment});
        }

        public Map<Id, String> getParentInvIdWithNextReversionInvNum(Set<Id> tmIds, Set<Id> tmlIds)
        {
            return (Map<Id, String>) mocks.mockNonVoidMethod(this, 'getParentInvIdWithNextReversionInvNum', new List<Type> {System.Type.forName('Set<Id>'), System.Type.forName('Set<Id>')}, new List<Object> {tmIds, tmlIds});
        }

        public Decimal calcSurchargeAmount(Sales_Invoice__c salesInvoice, List<Sales_Invoice_Line__c> salesInvoiceLines)
        {
            return (Decimal) mocks.mockNonVoidMethod(this, 'calcSurchargeAmount', new List<Type> {System.Type.forName('Sales_Invoice__c'), System.Type.forName('List<Sales_Invoice_Line__c>')}, new List<Object> {salesInvoice, salesInvoiceLines});
        }
    }

    public class SalesOrdersService implements ISalesOrdersService
    {
        private fflib_ApexMocks mocks;

        public SalesOrdersService(fflib_ApexMocks mocks)
        {
            this.mocks = mocks;
        }

        public void calcEstimatedDateInfo(Sales_Order__c salesOrder, List<ACVSalesOrderJobTaskWrapper> jobTaskWrappers, Integer duration)
        {
            mocks.mockVoidMethod(this, 'calcEstimatedDateInfo', new List<Type> {System.Type.forName('Sales_Order__c'), System.Type.forName('List<ACVSalesOrderJobTaskWrapper>'), System.Type.forName('Integer')}, new List<Object> {salesOrder, jobTaskWrappers, duration});
        }

        public void updateSalesLinesForBillAsLumpSumAllAction(List<Sales_Line__c> theSLList)
        {
            mocks.mockVoidMethod(this, 'updateSalesLinesForBillAsLumpSumAllAction', new List<Type> {System.Type.forName('List<Sales_Line__c>')}, new List<Object> {theSLList});
        }

        public Sales_Order__c createNewSalesQuoteOrSalesOrder(String documentType, Id billToCustomerId, String serviceCenter, String contract, String quote)
        {
            return (Sales_Order__c) mocks.mockNonVoidMethod(this, 'createNewSalesQuoteOrSalesOrder', new List<Type> {System.Type.forName('String'), System.Type.forName('Id'), System.Type.forName('String'), System.Type.forName('String'), System.Type.forName('String')}, new List<Object> {documentType, billToCustomerId, serviceCenter, contract, quote});
        }

        public void updateSalesOrderBillingAndTax(Sales_Order__c theSO, Boolean isNewSO)
        {
            mocks.mockVoidMethod(this, 'updateSalesOrderBillingAndTax', new List<Type> {System.Type.forName('Sales_Order__c'), System.Type.forName('Boolean')}, new List<Object> {theSO, isNewSO});
        }

        public String cloneSalesOrder(Set<Id> salesOrderIds, String documentType, String serviceCenter, String billToCustomer, Id billToParentId, String jobDescription, String poNumber)
        {
            return (String) mocks.mockNonVoidMethod(this, 'cloneSalesOrder', new List<Type> {System.Type.forName('Set<Id>'), System.Type.forName('String'), System.Type.forName('String'), System.Type.forName('String'), System.Type.forName('Id'), System.Type.forName('String'), System.Type.forName('String')}, new List<Object> {salesOrderIds, documentType, serviceCenter, billToCustomer, billToParentId, jobDescription, poNumber});
        }

        public String convertQuoteToOrder(Set<Id> salesOrderIds)
        {
            return (String) mocks.mockNonVoidMethod(this, 'convertQuoteToOrder', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {salesOrderIds});
        }

        public void setSurchargePct(Sales_Order__c salesOrder)
        {
            mocks.mockVoidMethod(this, 'setSurchargePct', new List<Type> {System.Type.forName('Sales_Order__c')}, new List<Object> {salesOrder});
        }

        public void updateSQWhenNewSOCreated(Id salesQuoteId)
        {
            mocks.mockVoidMethod(this, 'updateSQWhenNewSOCreated', new List<Type> {System.Type.forName('Id')}, new List<Object> {salesQuoteId});
        }

        public void calcSurchargeAmount(Sales_Order__c salesOrder, List<Sales_Order_Job_Task__c> jobTasks, List<Sales_Line__c> salesLines)
        {
            mocks.mockVoidMethod(this, 'calcSurchargeAmount', new List<Type> {System.Type.forName('Sales_Order__c'), System.Type.forName('List<Sales_Order_Job_Task__c>'), System.Type.forName('List<Sales_Line__c>')}, new List<Object> {salesOrder, jobTasks, salesLines});
        }

        public void calcJobTaskAmountFields(Sales_Order__c salesOrder, Sales_Order_Job_Task__c jobTask, List<Sales_Line__c> salesLines, Decimal taxPct)
        {
            mocks.mockVoidMethod(this, 'calcJobTaskAmountFields', new List<Type> {System.Type.forName('Sales_Order__c'), System.Type.forName('Sales_Order_Job_Task__c'), System.Type.forName('List<Sales_Line__c>'), System.Type.forName('Decimal')}, new List<Object> {salesOrder, jobTask, salesLines, taxPct});
        }

        public void updateTMAndSISuperUserChangeBTC(Sales_Order__c theSO)
        {
            mocks.mockVoidMethod(this, 'updateTMAndSISuperUserChangeBTC', new List<Type> {System.Type.forName('Sales_Order__c')}, new List<Object> {theSO});
        }

        public Integer updateTMPriceFromSO(Sales_Order__c theSO, List<TM__c> tms)
        {
            return (Integer) mocks.mockNonVoidMethod(this, 'updateTMPriceFromSO', new List<Type> {System.Type.forName('Sales_Order__c'), System.Type.forName('List<TM__c>')}, new List<Object> {theSO, tms});
        }

        public void createSalesLinesFromJobTaskTemplateLines(Sales_Order__c salesOrder, ACVSalesOrderJobTaskWrapper jobTaskWrapper, Integer nextSalesLineNo, List<Job_Task_Template_Line__c> jobTaskTemplateLines)
        {
            mocks.mockVoidMethod(this, 'createSalesLinesFromJobTaskTemplateLines', new List<Type> {System.Type.forName('Sales_Order__c'), System.Type.forName('ACVSalesOrderJobTaskWrapper'), System.Type.forName('Integer'), System.Type.forName('List<Job_Task_Template_Line__c>')}, new List<Object> {salesOrder, jobTaskWrapper, nextSalesLineNo, jobTaskTemplateLines});
        }

        public void cloneJobTask(Sales_Order__c salesOrder, ACVSalesOrderJobTaskWrapper fromJobTaskWrapper, ACVSalesOrderJobTaskWrapper newJobTaskWrapper, Integer nextSalesLineNo)
        {
            mocks.mockVoidMethod(this, 'cloneJobTask', new List<Type> {System.Type.forName('Sales_Order__c'), System.Type.forName('ACVSalesOrderJobTaskWrapper'), System.Type.forName('ACVSalesOrderJobTaskWrapper'), System.Type.forName('Integer')}, new List<Object> {salesOrder, fromJobTaskWrapper, newJobTaskWrapper, nextSalesLineNo});
        }
    }

    public class SalesLines extends fflib_SObjectMocks.SObjectDomain implements ISalesLines
    {
        private fflib_ApexMocks mocks;

        public SalesLines(fflib_ApexMocks mocks)
        {
            super(mocks);
            this.mocks = mocks;
        }

        public void updateSalesLinesForBillAsLumpSumAllAction()
        {
            mocks.mockVoidMethod(this, 'updateSalesLinesForBillAsLumpSumAllAction', new List<Type> {}, new List<Object> {});
        }
    }

    public class SalesOrdersSelector extends fflib_SObjectMocks.SObjectSelector implements ISalesOrdersSelector
    {
        private fflib_ApexMocks mocks;

        public SalesOrdersSelector(fflib_ApexMocks mocks)
        {
            super(mocks);
            this.mocks = mocks;
        }

        public List<Sales_Order__c> selectById(Set<Id> idSet)
        {
            return (List<Sales_Order__c>) mocks.mockNonVoidMethod(this, 'selectById', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<Sales_Order__c> selectCreateInvoiceRequiredFieldsById(Set<Id> idSet)
        {
            return (List<Sales_Order__c>) mocks.mockNonVoidMethod(this, 'selectCreateInvoiceRequiredFieldsById', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<Sales_Order__c> selectByIdWithLinesForClone(Set<Id> idSet)
        {
            return (List<Sales_Order__c>) mocks.mockNonVoidMethod(this, 'selectByIdWithLinesForClone', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<Sales_Order__c> selectConvertRelatedFieldsById(Set<Id> idSet)
        {
            return (List<Sales_Order__c>) mocks.mockNonVoidMethod(this, 'selectConvertRelatedFieldsById', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<Sales_Order__c> selectTMsById(Set<Id> idSet)
        {
            return (List<Sales_Order__c>) mocks.mockNonVoidMethod(this, 'selectTMsById', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<Sales_Order__c> selectServiceCenterById(Set<Id> idSet)
        {
            return (List<Sales_Order__c>) mocks.mockNonVoidMethod(this, 'selectServiceCenterById', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<Sales_Order__c> selectServiceCenterAndSubCompanyById(Set<Id> idSet)
        {
            return (List<Sales_Order__c>) mocks.mockNonVoidMethod(this, 'selectServiceCenterAndSubCompanyById', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<Sales_Order__c> selectQuotesByBillToCustomer(Id billToCustomer)
        {
            return (List<Sales_Order__c>) mocks.mockNonVoidMethod(this, 'selectQuotesByBillToCustomer', new List<Type> {System.Type.forName('Id')}, new List<Object> {billToCustomer});
        }

        public List<Sales_Order__c> selectConvertCountById(Set<Id> idSet)
        {
            return (List<Sales_Order__c>) mocks.mockNonVoidMethod(this, 'selectConvertCountById', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<Sales_Order__c> selectByIdWithSalesLines(Set<Id> ids)
        {
            return (List<Sales_Order__c>) mocks.mockNonVoidMethod(this, 'selectByIdWithSalesLines', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {ids});
        }

        public List<Sales_Order__c> selectByIdWithLinesAndProcessSteps(Set<Id> ids)
        {
            return (List<Sales_Order__c>) mocks.mockNonVoidMethod(this, 'selectByIdWithLinesAndProcessSteps', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {ids});
        }

        public List<Sales_Order__c> selectByContractIdsWithLines(Set<Id> contractIds)
        {
            return (List<Sales_Order__c>) mocks.mockNonVoidMethod(this, 'selectByContractIdsWithLines', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {contractIds});
        }
    }

    public class SalesInvoices extends fflib_SObjectMocks.SObjectDomain implements ISalesInvoices
    {
        private fflib_ApexMocks mocks;

        public SalesInvoices(fflib_ApexMocks mocks)
        {
            super(mocks);
            this.mocks = mocks;
        }

        public void updateCustomerPONumber(Map<Id, String> poToUpdateBySOIds, fflib_ISObjectUnitOfWork uow)
        {
            mocks.mockVoidMethod(this, 'updateCustomerPONumber', new List<Type> {System.Type.forName('Map<Id, String>'), System.Type.forName('fflib_ISObjectUnitOfWork')}, new List<Object> {poToUpdateBySOIds, uow});
        }
    }

    public class TMsSelector extends fflib_SObjectMocks.SObjectSelector implements ITMsSelector
    {
        private fflib_ApexMocks mocks;

        public TMsSelector(fflib_ApexMocks mocks)
        {
            super(mocks);
            this.mocks = mocks;
        }

        public List<TM__c> selectByIds(Set<Id> idSet)
        {
            return (List<TM__c>) mocks.mockNonVoidMethod(this, 'selectByIds', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<TM__c> selectByIdWithTMLines(Set<Id> idSet)
        {
            return (List<TM__c>) mocks.mockNonVoidMethod(this, 'selectByIdWithTMLines', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<TM__c> selectCreateInvoiceRequiredFieldsById(Set<Id> idSet)
        {
            return (List<TM__c>) mocks.mockNonVoidMethod(this, 'selectCreateInvoiceRequiredFieldsById', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<TM__c> selectCreateInvoiceHeaderRequiredFieldsById(Set<Id> idSet)
        {
            return (List<TM__c>) mocks.mockNonVoidMethod(this, 'selectCreateInvoiceHeaderRequiredFieldsById', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<TM__c> selectTMLineNOById(Set<Id> idSet)
        {
            return (List<TM__c>) mocks.mockNonVoidMethod(this, 'selectTMLineNOById', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<TM__c> selectPOBySalesOrderId(Set<Id> idSet)
        {
            return (List<TM__c>) mocks.mockNonVoidMethod(this, 'selectPOBySalesOrderId', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<TM__c> selectOpenTMsBySalesOrderIdWithLines(Id salesOrderId)
        {
            return (List<TM__c>) mocks.mockNonVoidMethod(this, 'selectOpenTMsBySalesOrderIdWithLines', new List<Type> {System.Type.forName('Id')}, new List<Object> {salesOrderId});
        }

        public List<TM__c> selectOpenTMsBySalesOrderIdAndInvoiceIdWithLines(Id salesOrderId, Set<Id> invIds)
        {
            return (List<TM__c>) mocks.mockNonVoidMethod(this, 'selectOpenTMsBySalesOrderIdAndInvoiceIdWithLines', new List<Type> {System.Type.forName('Id'), System.Type.forName('Set<Id>')}, new List<Object> {salesOrderId, invIds});
        }

        public List<TM__c> selectTMsBySalesOrderIds(Set<Id> salesOrderIds)
        {
            return (List<TM__c>) mocks.mockNonVoidMethod(this, 'selectTMsBySalesOrderIds', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {salesOrderIds});
        }
    }

    public class TMLLinesService implements ITMLLinesService
    {
        private fflib_ApexMocks mocks;

        public TMLLinesService(fflib_ApexMocks mocks)
        {
            this.mocks = mocks;
        }

        public Map<Id, String> retrieveContractLinesTMDescription(List<TM_Line__c> theTMLList)
        {
            return (Map<Id, String>) mocks.mockNonVoidMethod(this, 'retrieveContractLinesTMDescription', new List<Type> {System.Type.forName('List<TM_Line__c>')}, new List<Object> {theTMLList});
        }

        public void initStaticVariables(Map<TM__c, List<TM_Line__c>> tmLinesByTms)
        {
            mocks.mockVoidMethod(this, 'initStaticVariables', new List<Type> {System.Type.forName('Map<TM__c, List<TM_Line__c>>')}, new List<Object> {tmLinesByTms});
        }

        public void validateTMLinesResourceType(List<TM_Line__c> theTMLList)
        {
            mocks.mockVoidMethod(this, 'validateTMLinesResourceType', new List<Type> {System.Type.forName('List<TM_Line__c>')}, new List<Object> {theTMLList});
        }

        public void validateTMLinesUnitOfMeasure(List<TM_Line__c> theTMLList)
        {
            mocks.mockVoidMethod(this, 'validateTMLinesUnitOfMeasure', new List<Type> {System.Type.forName('List<TM_Line__c>')}, new List<Object> {theTMLList});
        }

        public void validateTMLinesRestOfFields(List<TM_Line__c> theTMLList)
        {
            mocks.mockVoidMethod(this, 'validateTMLinesRestOfFields', new List<Type> {System.Type.forName('List<TM_Line__c>')}, new List<Object> {theTMLList});
        }

        public void populateLinesInfo(Map<TM__c, List<TM_Line__c>> tmLinesByTMs)
        {
            mocks.mockVoidMethod(this, 'populateLinesInfo', new List<Type> {System.Type.forName('Map<TM__c, List<TM_Line__c>>')}, new List<Object> {tmLinesByTMs});
        }

        public void calcLineCost(Map<TM__c, List<TM_Line__c>> tmLinesByTms)
        {
            mocks.mockVoidMethod(this, 'calcLineCost', new List<Type> {System.Type.forName('Map<TM__c, List<TM_Line__c>>')}, new List<Object> {tmLinesByTms});
        }

        public void calcUnitPrice(TM__c tm, TM_Line__c tmLine)
        {
            mocks.mockVoidMethod(this, 'calcUnitPrice', new List<Type> {System.Type.forName('TM__c'), System.Type.forName('TM_Line__c')}, new List<Object> {tm, tmLine});
        }

        public void calcUnitCost(TM__c tm, TM_Line__c tmLine)
        {
            mocks.mockVoidMethod(this, 'calcUnitCost', new List<Type> {System.Type.forName('TM__c'), System.Type.forName('TM_Line__c')}, new List<Object> {tm, tmLine});
        }

        public void calcTotals(Map<TM__c, List<TM_Line__c>> tmLinesByTMs)
        {
            mocks.mockVoidMethod(this, 'calcTotals', new List<Type> {System.Type.forName('Map<TM__c, List<TM_Line__c>>')}, new List<Object> {tmLinesByTMs});
        }

        public void validateResourceType(TM__c tm, TM_Line__c tmLine)
        {
            mocks.mockVoidMethod(this, 'validateResourceType', new List<Type> {System.Type.forName('TM__c'), System.Type.forName('TM_Line__c')}, new List<Object> {tm, tmLine});
        }

        public void validateResource(TM__c tm, TM_Line__c tmLine)
        {
            mocks.mockVoidMethod(this, 'validateResource', new List<Type> {System.Type.forName('TM__c'), System.Type.forName('TM_Line__c')}, new List<Object> {tm, tmLine});
        }

        public void validateContractLine(TM__c tm, TM_Line__c tmLine)
        {
            mocks.mockVoidMethod(this, 'validateContractLine', new List<Type> {System.Type.forName('TM__c'), System.Type.forName('TM_Line__c')}, new List<Object> {tm, tmLine});
        }

        public Boolean isCalcBaseOnResType(String lineCategory)
        {
            return (Boolean) mocks.mockNonVoidMethod(this, 'isCalcBaseOnResType', new List<Type> {System.Type.forName('String')}, new List<Object> {lineCategory});
        }

        public void validateUnitOfMeasure(TM__c tm, TM_Line__c tmLine)
        {
            mocks.mockVoidMethod(this, 'validateUnitOfMeasure', new List<Type> {System.Type.forName('TM__c'), System.Type.forName('TM_Line__c')}, new List<Object> {tm, tmLine});
        }

        //ticket 19130 <<
        /*
        public List<TM_Line__c> calculatePresumptiveChildLines(TM__c tm, TM_Job_Task__c jobTask, TM_Line__c parentLine, Integer nextTMLineNo)
        {
            return (List<TM_Line__c>) mocks.mockNonVoidMethod(this, 'calculatePresumptiveChildLines', new List<Type> {System.Type.forName('TM__c'), System.Type.forName('TM_Job_Task__c'), System.Type.forName('TM_Line__c'), System.Type.forName('Integer')}, new List<Object> {tm, jobTask, parentLine, nextTMLineNo});
        }
        */
        public TM_Line__c calculatePresumptiveChildLines(TM__c tm, ACVTMJobTaskWrapper jobTaskWrapper, TM_Line__c parentLine, Integer nextTMLineNo)
        {
            return (TM_Line__c) mocks.mockNonVoidMethod(this, 'calculatePresumptiveChildLines', new List<Type> {System.Type.forName('TM__c'), System.Type.forName('ACVTMJobTaskWrapper'), System.Type.forName('TM_Line__c'), System.Type.forName('Integer')}, new List<Object> {tm, jobTaskWrapper, parentLine, nextTMLineNo});
        }
        //ticket 19130 >>

        public void createSafetyPlanLine(TM__c tm, ACVTMJobTaskWrapper jobTaskWrapper, Integer nextTMLineNo)
        {
            mocks.mockVoidMethod(this, 'createSafetyPlanLine', new List<Type> {System.Type.forName('TM__c'), System.Type.forName('ACVTMJobTaskWrapper'), System.Type.forName('Integer')}, new List<Object> {tm, jobTaskWrapper, nextTMLineNo});
        }

        public void calculateManifestFeeLine(TM__c tm, ACVTMJobTaskWrapper jobTaskWrapper, Integer nextTMLineNo)
        {
            mocks.mockVoidMethod(this, 'calculateManifestFeeLine', new List<Type> {System.Type.forName('TM__c'), System.Type.forName('ACVTMJobTaskWrapper'), System.Type.forName('Integer')}, new List<Object> {tm, jobTaskWrapper, nextTMLineNo});
        }

        public void calculateRinseOutFeeLine(TM__c tm, ACVTMJobTaskWrapper jobTaskWrapper, Integer nextTMLineNo)
        {
            mocks.mockVoidMethod(this, 'calculateRinseOutFeeLine', new List<Type> {System.Type.forName('TM__c'), System.Type.forName('ACVTMJobTaskWrapper'), System.Type.forName('Integer')}, new List<Object> {tm, jobTaskWrapper, nextTMLineNo});
        }
    }

    public class SalesLinesService implements ISalesLinesService
    {
        private fflib_ApexMocks mocks;

        public SalesLinesService(fflib_ApexMocks mocks)
        {
            this.mocks = mocks;
        }

        public void assignDescription(Sales_Order__c salesOrder, Sales_Line__c salesLine)
        {
            mocks.mockVoidMethod(this, 'assignDescription', new List<Type> {System.Type.forName('Sales_Order__c'), System.Type.forName('Sales_Line__c')}, new List<Object> {salesOrder, salesLine});
        }

        public void assignUnitOfMeasure(Sales_Line__c salesLine)
        {
            mocks.mockVoidMethod(this, 'assignUnitOfMeasure', new List<Type> {System.Type.forName('Sales_Line__c')}, new List<Object> {salesLine});
        }

        public void assignUnitOfMeasure(Sales_Order__c salesOrder, Sales_Line__c salesLine)
        {
            mocks.mockVoidMethod(this, 'assignUnitOfMeasure', new List<Type> {System.Type.forName('Sales_Order__c'), System.Type.forName('Sales_Line__c')}, new List<Object> {salesOrder, salesLine});
        }

        public void assignTaxPercent(Sales_Order__c salesOrder, Sales_Line__c salesLine)
        {
            mocks.mockVoidMethod(this, 'assignTaxPercent', new List<Type> {System.Type.forName('Sales_Order__c'), System.Type.forName('Sales_Line__c')}, new List<Object> {salesOrder, salesLine});
        }

        public void calculateLineTotals(Sales_Order__c salesOrder, Sales_Line__c salesLine)
        {
            mocks.mockVoidMethod(this, 'calculateLineTotals', new List<Type> {System.Type.forName('Sales_Order__c'), System.Type.forName('Sales_Line__c')}, new List<Object> {salesOrder, salesLine});
        }

        public void initStaticVariables(Sales_Order__c salesOrder, List<ACVSalesOrderJobTaskWrapper> jobTaskWrappers)
        {
            mocks.mockVoidMethod(this, 'initStaticVariables', new List<Type> {System.Type.forName('Sales_Order__c'), System.Type.forName('List<ACVSalesOrderJobTaskWrapper>')}, new List<Object> {salesOrder, jobTaskWrappers});
        }

        public Sales_Line__c newSalesLine(Sales_Order__c salesOrder, Sales_Order_Job_Task__c jobTask, String category, Integer nextSalesLineNo)
        {
            return (Sales_Line__c) mocks.mockNonVoidMethod(this, 'newSalesLine', new List<Type> {System.Type.forName('Sales_Order__c'), System.Type.forName('Sales_Order_Job_Task__c'), System.Type.forName('String'), System.Type.forName('Integer')}, new List<Object> {salesOrder, jobTask, category, nextSalesLineNo});
        }

        public void explodeSalesLineDetails(Sales_Order__c salesOrder, List<ACVSalesOrderJobTaskWrapper> jobTaskWrappers)
        {
            mocks.mockVoidMethod(this, 'explodeSalesLineDetails', new List<Type> {System.Type.forName('Sales_Order__c'), System.Type.forName('List<ACVSalesOrderJobTaskWrapper>')}, new List<Object> {salesOrder, jobTaskWrappers});
        }

        public void recalculateSalesLineDetails(Sales_Order__c salesOrder, List<ACVSalesOrderJobTaskWrapper> jobTaskWrappers, Boolean recalculateHours)
        {
            mocks.mockVoidMethod(this, 'recalculateSalesLineDetails', new List<Type> {System.Type.forName('Sales_Order__c'), System.Type.forName('List<ACVSalesOrderJobTaskWrapper>'), System.Type.forName('Boolean')}, new List<Object> {salesOrder, jobTaskWrappers, recalculateHours});
        }

        //ticket 19130 <<
        /*
        public List<Sales_Line__c> calculatePresumptiveChildLines(Sales_Order__c salesOrder, Sales_Order_Job_Task__c jobTask, Sales_Line__c parentLine, Integer nextSalesLineNo)
        {
            return (List<Sales_Line__c>) mocks.mockNonVoidMethod(this, 'calculatePresumptiveChildLines', new List<Type> {System.Type.forName('Sales_Order__c'), System.Type.forName('Sales_Order_Job_Task__c'), System.Type.forName('Sales_Line__c'), System.Type.forName('Integer')}, new List<Object> {salesOrder, jobTask, parentLine, nextSalesLineNo});
        }
        */
        public Sales_Line__c calculatePresumptiveChildLines(Sales_Order__c salesOrder, ACVSalesOrderJobTaskWrapper jobTaskWrapper, Sales_Line__c parentLine, Integer nextSalesLineNo)
        {
            return (Sales_Line__c) mocks.mockNonVoidMethod(this, 'calculatePresumptiveChildLines', new List<Type> {System.Type.forName('Sales_Order__c'), System.Type.forName('ACVSalesOrderJobTaskWrapper'), System.Type.forName('Sales_Line__c'), System.Type.forName('Integer')}, new List<Object> {salesOrder, jobTaskWrapper, parentLine, nextSalesLineNo});
        }
        //ticket 19130 >>

        public void recalculateSalesLines(Sales_Order__c salesOrder, List<ACVSalesOrderJobTaskWrapper> jobTaskWrappers)
        {
            mocks.mockVoidMethod(this, 'recalculateSalesLines', new List<Type> {System.Type.forName('Sales_Order__c'), System.Type.forName('List<ACVSalesOrderJobTaskWrapper>')}, new List<Object> {salesOrder, jobTaskWrappers});
        }

        public void calculateLumpSumLine(Sales_Line__c lumpSumLine, Sales_Order__c salesOrder, List<Sales_Line__c> salesLines, Boolean overwriteUnitPrice)
        {
            mocks.mockVoidMethod(this, 'calculateLumpSumLine', new List<Type> {System.Type.forName('Sales_Line__c'), System.Type.forName('Sales_Order__c'), System.Type.forName('List<Sales_Line__c>'), System.Type.forName('Boolean')}, new List<Object> {lumpSumLine, salesOrder, salesLines, overwriteUnitPrice});
        }

        public void assignResourceTypeUOM(Sales_Line__c salesLine)
        {
            mocks.mockVoidMethod(this, 'assignResourceTypeUOM', new List<Type> {System.Type.forName('Sales_Line__c')}, new List<Object> {salesLine});
        }

        public void assignResourceUOM(Sales_Line__c salesLine)
        {
            mocks.mockVoidMethod(this, 'assignResourceUOM', new List<Type> {System.Type.forName('Sales_Line__c')}, new List<Object> {salesLine});
        }

        public void calcUnitPrice(Sales_Order__c salesOrder, Sales_Line__c salesLine)
        {
            mocks.mockVoidMethod(this, 'calcUnitPrice', new List<Type> {System.Type.forName('Sales_Order__c'), System.Type.forName('Sales_Line__c')}, new List<Object> {salesOrder, salesLine});
        }

        public void calcUnitCost(Sales_Order__c salesOrder, Sales_Line__c salesLine)
        {
            mocks.mockVoidMethod(this, 'calcUnitCost', new List<Type> {System.Type.forName('Sales_Order__c'), System.Type.forName('Sales_Line__c')}, new List<Object> {salesOrder, salesLine});
        }

        public void updateTotals(Sales_Order__c salesOrder, List<ACVSalesOrderJobTaskWrapper> jobTaskWrappers)
        {
            mocks.mockVoidMethod(this, 'updateTotals', new List<Type> {System.Type.forName('Sales_Order__c'), System.Type.forName('List<ACVSalesOrderJobTaskWrapper>')}, new List<Object> {salesOrder, jobTaskWrappers});
        }

        public void calcLaborUnitPrice(Sales_Order__c salesOrder, Sales_Line__c salesLine)
        {
            mocks.mockVoidMethod(this, 'calcLaborUnitPrice', new List<Type> {System.Type.forName('Sales_Order__c'), System.Type.forName('Sales_Line__c')}, new List<Object> {salesOrder, salesLine});
        }

        public void calculateSurchargeLine(Sales_Order__c salesOrder, ACVSalesOrderJobTaskWrapper jobTaskWrapper, Integer nextSalesLineNo)
        {
            mocks.mockVoidMethod(this, 'calculateSurchargeLine', new List<Type> {System.Type.forName('Sales_Order__c'), System.Type.forName('ACVSalesOrderJobTaskWrapper'), System.Type.forName('Integer')}, new List<Object> {salesOrder, jobTaskWrapper, nextSalesLineNo});
        }

        public void calculateManifestFeeLine(Sales_Order__c salesOrder, ACVSalesOrderJobTaskWrapper jobTaskWrapper, Integer nextSalesLineNo)
        {
            mocks.mockVoidMethod(this, 'calculateManifestFeeLine', new List<Type> {System.Type.forName('Sales_Order__c'), System.Type.forName('ACVSalesOrderJobTaskWrapper'), System.Type.forName('Integer')}, new List<Object> {salesOrder, jobTaskWrapper, nextSalesLineNo});
        }

        public void calculateRinseOutFeeLine(Sales_Order__c salesOrder, ACVSalesOrderJobTaskWrapper jobTaskWrapper, Integer nextSalesLineNo)
        {
            mocks.mockVoidMethod(this, 'calculateRinseOutFeeLine', new List<Type> {System.Type.forName('Sales_Order__c'), System.Type.forName('ACVSalesOrderJobTaskWrapper'), System.Type.forName('Integer')}, new List<Object> {salesOrder, jobTaskWrapper, nextSalesLineNo});
        }

        public List<Sales_Line__c> splitLaborLines(Sales_Order__c salesOrder, List<Sales_Line__c> salesLines, Integer nextSalesLineNo)
        {
            return (List<Sales_Line__c>) mocks.mockNonVoidMethod(this, 'splitLaborLines', new List<Type> {System.Type.forName('Sales_Order__c'), System.Type.forName('List<Sales_Line__c>'), System.Type.forName('Integer')}, new List<Object> {salesOrder, salesLines, nextSalesLineNo});
        }
    }

    public class ResourcesSelector extends fflib_SObjectMocks.SObjectSelector implements IResourcesSelector
    {
        private fflib_ApexMocks mocks;

        public ResourcesSelector(fflib_ApexMocks mocks)
        {
            super(mocks);
            this.mocks = mocks;
        }

        public List<Resource__c> selectById(Set<Id> idSet)
        {
            return (List<Resource__c>) mocks.mockNonVoidMethod(this, 'selectById', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<Resource__c> selectLaborResourcesByIds(Set<Id> ids)
        {
            return (List<Resource__c>) mocks.mockNonVoidMethod(this, 'selectLaborResourcesByIds', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {ids});
        }

        public List<Resource__c> selectLaborResourcesByServiceCenter(Id scId)
        {
            return (List<Resource__c>) mocks.mockNonVoidMethod(this, 'selectLaborResourcesByServiceCenter', new List<Type> {System.Type.forName('Id')}, new List<Object> {scId});
        }

        public List<Resource__c> selectPayrollEmployeeByIdsByActivityDate(Set<Id> resIds, Date activityDate)
        {
            return (List<Resource__c>) mocks.mockNonVoidMethod(this, 'selectPayrollEmployeeByIdsByActivityDate', new List<Type> {System.Type.forName('Set<Id>'), System.Type.forName('Date')}, new List<Object> {resIds, activityDate});
        }

        public List<Resource__c> selectPayrollEmployeeBySCIdByActivityDate(Id scId, Date activityDate)
        {
            return (List<Resource__c>) mocks.mockNonVoidMethod(this, 'selectPayrollEmployeeBySCIdByActivityDate', new List<Type> {System.Type.forName('Id'), System.Type.forName('Date')}, new List<Object> {scId, activityDate});
        }

        public Map<Id, Resource__c> getResourcesByIdsMapByResIds(Set<Id> idSet)
        {
            return (Map<Id, Resource__c>) mocks.mockNonVoidMethod(this, 'getResourcesByIdsMapByResIds', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }
    }

    public class AccountsSelector extends fflib_SObjectMocks.SObjectSelector implements IAccountsSelector
    {
        private fflib_ApexMocks mocks;

        public AccountsSelector(fflib_ApexMocks mocks)
        {
            super(mocks);
            this.mocks = mocks;
        }

        public List<Account> selectById(Set<Id> idSet)
        {
            return (List<Account>) mocks.mockNonVoidMethod(this, 'selectById', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<Account> selectBillingInstructionsById(Set<Id> idSet)
        {
            return (List<Account>) mocks.mockNonVoidMethod(this, 'selectBillingInstructionsById', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<Account> selectTaxAreaNameById(Set<Id> idSet)
        {
            return (List<Account>) mocks.mockNonVoidMethod(this, 'selectTaxAreaNameById', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<Account> selectSubsidiaryCompInfoById(Set<Id> idSet)
        {
            return (List<Account>) mocks.mockNonVoidMethod(this, 'selectSubsidiaryCompInfoById', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<Account> selectParentAccountById(Set<Id> idSet)
        {
            return (List<Account>) mocks.mockNonVoidMethod(this, 'selectParentAccountById', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }
    }

    public class TMLinesSelector extends fflib_SObjectMocks.SObjectSelector implements ITMLinesSelector
    {
        private fflib_ApexMocks mocks;

        public TMLinesSelector(fflib_ApexMocks mocks)
        {
            super(mocks);
            this.mocks = mocks;
        }

        public List<TM_Line__c> selectByIds(Set<Id> ids)
        {
            return (List<TM_Line__c>) mocks.mockNonVoidMethod(this, 'selectByIds', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {ids});
        }

        public List<TM_Line__c> selectByTmId(Set<Id> tmIds)
        {
            return (List<TM_Line__c>) mocks.mockNonVoidMethod(this, 'selectByTmId', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {tmIds});
        }

        public Map<Id, TM_Line__c> selectTMLMapWithResourceTypeAndResourceById(Set<Id> idSet)
        {
            return (Map<Id, TM_Line__c>) mocks.mockNonVoidMethod(this, 'selectTMLMapWithResourceTypeAndResourceById', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public Map<Id, TM_Line__c> selectTMLMapWithUnitOfMeasureById(Set<Id> idSet)
        {
            return (Map<Id, TM_Line__c>) mocks.mockNonVoidMethod(this, 'selectTMLMapWithUnitOfMeasureById', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<TM_Line__c> selectInterCompanyLineByScheduledDateRange(Date startDate, Date endDate)
        {
            return (List<TM_Line__c>) mocks.mockNonVoidMethod(this, 'selectInterCompanyLineByScheduledDateRange', new List<Type> {System.Type.forName('Date'), System.Type.forName('Date')}, new List<Object> {startDate, endDate});
        }

        public List<TM_Line__c> selectByTmId(Set<Id> tmIds, List<String> filters)
        {
            return (List<TM_Line__c>) mocks.mockNonVoidMethod(this, 'selectByTmId', new List<Type> {System.Type.forName('Set<Id>'), System.Type.forName('List<String>')}, new List<Object> {tmIds, filters});
        }

        public List<TM_Line__c> selectTMLinesByCategory(Id tmId, Id jobTaskId, String category)
        {
            return (List<TM_Line__c>) mocks.mockNonVoidMethod(this, 'selectTMLinesByCategory', new List<Type> {System.Type.forName('Id'), System.Type.forName('Id'), System.Type.forName('String')}, new List<Object> {tmId, jobTaskId, category});
        }

        public List<TM_Line__c> selectWithFlatPaysByTmId(Set<Id> tmIds, List<String> tmLineFilters)
        {
            return (List<TM_Line__c>) mocks.mockNonVoidMethod(this, 'selectWithFlatPaysByTmId', new List<Type> {System.Type.forName('Set<Id>'), System.Type.forName('List<String>')}, new List<Object> {tmIds, tmLineFilters});
        }

        public List<TM_Line__c> selectAwayServiceCenterLinesByScheduledDateServiceCenterAndCategory(Date scheduledDate, String serviceCenter, String category)
        {
            return (List<TM_Line__c>) mocks.mockNonVoidMethod(this, 'selectAwayServiceCenterLinesByScheduledDateServiceCenterAndCategory', new List<Type> {System.Type.forName('Date'), System.Type.forName('String'), System.Type.forName('String')}, new List<Object> {scheduledDate, serviceCenter, category});
        }

        public List<TM_Line__c> selectCreateInvoiceRequiredFieldsById(Set<Id> idSet)
        {
            return (List<TM_Line__c>) mocks.mockNonVoidMethod(this, 'selectCreateInvoiceRequiredFieldsById', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<TM_Line__c> selectSafetyPlanLineByTMId(Set<Id> idSet, Id resourceId)
        {
            return (List<TM_Line__c>) mocks.mockNonVoidMethod(this, 'selectSafetyPlanLineByTMId', new List<Type> {System.Type.forName('Set<Id>'), System.Type.forName('Id')}, new List<Object> {idSet, resourceId});
        }
    }

    public class ServiceCentersSelector extends fflib_SObjectMocks.SObjectSelector implements IServiceCentersSelector
    {
        private fflib_ApexMocks mocks;

        public ServiceCentersSelector(fflib_ApexMocks mocks)
        {
            super(mocks);
            this.mocks = mocks;
        }

        public List<Service_Center__c> selectById(Set<Id> idSet)
        {
            return (List<Service_Center__c>) mocks.mockNonVoidMethod(this, 'selectById', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<Service_Center__c> selectByName(String name)
        {
            return (List<Service_Center__c>) mocks.mockNonVoidMethod(this, 'selectByName', new List<Type> {System.Type.forName('String')}, new List<Object> {name});
        }

        public List<Service_Center__c> selectAll()
        {
            return (List<Service_Center__c>) mocks.mockNonVoidMethod(this, 'selectAll', new List<Type> {}, new List<Object> {});
        }
    }

    public class SalesInvoicesSelector extends fflib_SObjectMocks.SObjectSelector implements ISalesInvoicesSelector
    {
        private fflib_ApexMocks mocks;

        public SalesInvoicesSelector(fflib_ApexMocks mocks)
        {
            super(mocks);
            this.mocks = mocks;
        }

        public List<Sales_Invoice__c> selectById(Set<Id> idSet)
        {
            return (List<Sales_Invoice__c>) mocks.mockNonVoidMethod(this, 'selectById', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<Sales_Invoice__c> selectLineCountById(Set<Id> idSet)
        {
            return (List<Sales_Invoice__c>) mocks.mockNonVoidMethod(this, 'selectLineCountById', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<Sales_Invoice__c> selectByIdWithSILines(Set<Id> idSet)
        {
            return (List<Sales_Invoice__c>) mocks.mockNonVoidMethod(this, 'selectByIdWithSILines', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<Sales_Invoice__c> selectByIdWithSILinesForReverse(Set<Id> idSet)
        {
            return (List<Sales_Invoice__c>) mocks.mockNonVoidMethod(this, 'selectByIdWithSILinesForReverse', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<Sales_Invoice__c> selectPOBySalesOrderId(Set<Id> idSet)
        {
            return (List<Sales_Invoice__c>) mocks.mockNonVoidMethod(this, 'selectPOBySalesOrderId', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<Sales_Invoice__c> selectOpenCreditMemoWorksheetWithLines(Id id)
        {
            return (List<Sales_Invoice__c>) mocks.mockNonVoidMethod(this, 'selectOpenCreditMemoWorksheetWithLines', new List<Type> {System.Type.forName('Id')}, new List<Object> {id});
        }

        public List<Sales_Invoice__c> selectCreditMemoWorksheetsWithChangedLines(Id id)
        {
            return (List<Sales_Invoice__c>) mocks.mockNonVoidMethod(this, 'selectCreditMemoWorksheetsWithChangedLines', new List<Type> {System.Type.forName('Id')}, new List<Object> {id});
        }

        public List<Sales_Invoice__c> selectByIdWithLinesAndProcessSteps(Set<Id> ids)
        {
            return (List<Sales_Invoice__c>) mocks.mockNonVoidMethod(this, 'selectByIdWithLinesAndProcessSteps', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {ids});
        }
    }

    public class ContractsSelector extends fflib_SObjectMocks.SObjectSelector implements IContractsSelector
    {
        private fflib_ApexMocks mocks;

        public ContractsSelector(fflib_ApexMocks mocks)
        {
            super(mocks);
            this.mocks = mocks;
        }

        public List<Contract> selectById(Set<Id> idSet)
        {
            return (List<Contract>) mocks.mockNonVoidMethod(this, 'selectById', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<Contract> selectBillingInstructionsById(Set<Id> idSet)
        {
            return (List<Contract>) mocks.mockNonVoidMethod(this, 'selectBillingInstructionsById', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<Contract> selectByAccountId(Set<Id> idSet)
        {
            return (List<Contract>) mocks.mockNonVoidMethod(this, 'selectByAccountId', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<Contract> selectByIdWithBillingRule(Set<Id> idSet)
        {
            return (List<Contract>) mocks.mockNonVoidMethod(this, 'selectByIdWithBillingRule', new List<Type> {System.Type.forName('Set<Id>')}, new List<Object> {idSet});
        }

        public List<Account_Contract_Association__c> selectAccountContractAssociationByAcctIdAndConttractId(Id accountId, Id contractId)
        {
            return (List<Account_Contract_Association__c>) mocks.mockNonVoidMethod(this, 'selectAccountContractAssociationByAcctIdAndConttractId', new List<Type> {System.Type.forName('Id'), System.Type.forName('Id')}, new List<Object> {accountId, contractId});
        }
    }

}